package com.projectgo.barber_booking.controller;

import com.projectgo.barber_booking.model.Booking;
import com.projectgo.barber_booking.repository.BookingRepository;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

@RestController
@RequestMapping("/api/bookings")
public class BookingRestController {

    private final BookingRepository bookingRepository;

    public BookingRestController(BookingRepository bookingRepository) {
        this.bookingRepository = bookingRepository;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡πÄ‡∏î‡∏¥‡∏°)
    @PostMapping
    public Booking createBooking(@RequestBody Booking booking) {
        return bookingRepository.save(booking);
    }

    // ----- üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ -----

    // 1) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å/‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
    @PatchMapping("/{id}/status")
    public ResponseEntity<Booking> updateStatus(@PathVariable Long id,
                                                @RequestBody StatusDTO body) {
        Booking b = bookingRepository.findById(id).orElse(null);
        if (b == null) return ResponseEntity.notFound().build();

        String status = body.status();
        if (status == null || status.isBlank()) {
            return ResponseEntity.badRequest().build();
        }
        b.setStatus(status.trim());
        return ResponseEntity.ok(bookingRepository.save(b));
    }

    // 2) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (endpoint ‡∏´‡∏•‡∏±‡∏Å)
    @PatchMapping("/{id}/schedule")
    public ResponseEntity<Booking> updateSchedule(@PathVariable Long id,
                                                  @RequestBody ScheduleDTO body) {
        Booking b = bookingRepository.findById(id).orElse(null);
        if (b == null) return ResponseEntity.notFound().build();

        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á "yyyy-MM-dd" (‡∏à‡∏≤‡∏Å <input type=date>) ‡πÅ‡∏•‡∏∞ "dd/MM/yyyy"
        if (body.date() != null && !body.date().isBlank()) {
            b.setDate(parseDate(body.date().trim()));
        }
        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á "HH:mm" ‡πÅ‡∏•‡∏∞ "HH:mm:ss"
        if (body.time() != null && !body.time().isBlank()) {
            b.setTime(parseTime(body.time().trim()));
        }
        return ResponseEntity.ok(bookingRepository.save(b));
    }

    // 2.1) alias ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å /{id}/time  ‚úÖ ‡πÅ‡∏Å‡πâ 404 ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    @PatchMapping("/{id}/time")
    public ResponseEntity<Booking> updateTimeAlias(@PathVariable Long id,
                                                   @RequestBody ScheduleDTO body) {
        return updateSchedule(id, body);
    }

    // 3) ‡∏•‡∏ö/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏Å DELETE)
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        if (!bookingRepository.existsById(id)) return ResponseEntity.notFound().build();
        bookingRepository.deleteById(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }

    // ---------- helpers ----------
    private static LocalDate parseDate(String s) {
        try {
            return LocalDate.parse(s); // ISO: yyyy-MM-dd
        } catch (DateTimeParseException ignore) {
        }
        // fallback: dd/MM/yyyy
        DateTimeFormatter f = DateTimeFormatter.ofPattern("dd/MM/uuuu");
        return LocalDate.parse(s, f);
    }

    private static LocalTime parseTime(String s) {
        try {
            return LocalTime.parse(s); // HH:mm:ss ‡∏´‡∏£‡∏∑‡∏≠ HH:mm ‡∏Å‡πá‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà
        } catch (DateTimeParseException ignore) {
        }
        // fallback: H:mm
        DateTimeFormatter f = DateTimeFormatter.ofPattern("H:mm");
        return LocalTime.parse(s, f);
    }

    // ---------- DTO ----------
    public record StatusDTO(String status) {}
    public record ScheduleDTO(String date, String time) {}
}
