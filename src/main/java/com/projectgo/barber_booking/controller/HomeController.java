package com.projectgo.barber_booking.controller;

import com.projectgo.barber_booking.model.User;
import com.projectgo.barber_booking.repository.UserRepository;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.security.Principal;
import java.util.*;

@Controller
public class HomeController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder;

    // --- [0] ‡∏´‡∏ô‡πâ‡∏≤ Admin (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Thymeleaf view) ---
    // SecurityConfig ‡∏à‡∏∞‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ROLE_ADMIN ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
    // @GetMapping("/admin")
    // public String adminPage() {
    //     return "admin_dashboard";
    // }

    // --- [1] ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ---
    @GetMapping("/register")
    public String showRegisterForm(Model model) {
        model.addAttribute("user", new User());
        return "register";
    }

    @PostMapping("/register")
    public String registerUser(@ModelAttribute("user") User user,
                               @RequestParam("confirmPassword") String confirmPassword,
                               Model model) {

        String username   = Optional.ofNullable(user.getUsername()).orElse("").trim();
        String rawPassword = Optional.ofNullable(user.getPassword()).orElse("");

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if (username.isEmpty() || rawPassword.isEmpty()) {
            model.addAttribute("error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
            return "register";
        }
        if (!rawPassword.equals(confirmPassword)) {
            model.addAttribute("error", "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô");
            return "register";
        }
        if (userRepository.findByUsername(username).isPresent()) {
            model.addAttribute("error", "‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß");
            return "register";
        }

        // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô + ‡∏ï‡∏±‡πâ‡∏á role ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô USER
        user.setUsername(username);
        user.setPassword(passwordEncoder.encode(rawPassword));
        user.setRole("USER"); // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏° ROLE_ ‡πÇ‡∏î‡∏¢ CustomUserDetailsService
        userRepository.save(user);

        return "redirect:/login?registered";
    }

    // --- [2] ‡∏´‡∏ô‡πâ‡∏≤ Login ---
    @GetMapping("/login")
    public String showLoginForm(@RequestParam(value = "error",      required = false) String error,
                                @RequestParam(value = "logout",     required = false) String logout,
                                @RequestParam(value = "registered", required = false) String registered,
                                Model model) {
        if (error != null)      model.addAttribute("errorMessage",   "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        if (logout != null)     model.addAttribute("successMessage", "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        if (registered != null) model.addAttribute("successMessage", "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
        return "login";
    }

// --- [3] ‡∏´‡∏ô‡πâ‡∏≤ Home ---
@GetMapping({"/", "/home", "/home/"})
public String showHomePage(Model model, Principal principal) {
    if (principal != null) {
        model.addAttribute("username", principal.getName());
    }
    model.addAttribute("activePage", "home"); 
    return "home";
}


    // --- [4] ‡∏´‡∏ô‡πâ‡∏≤ Profile ---
    @GetMapping("/profile")
    public String userProfile(Model model, Principal principal, HttpServletRequest request) {
        if (principal == null) {
            return "redirect:/login";
        }

        String username = principal.getName();
        Optional<User> userOpt = userRepository.findByUsername(username);
        model.addAttribute("user", userOpt.orElseGet(User::new)); // ‡∏Å‡∏±‡∏ô null

        // ‚úÖ ‡∏£‡∏±‡∏ö flash attribute (‡πÄ‡∏ä‡πà‡∏ô successMessage) ‡∏à‡∏≤‡∏Å session ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ Thymeleaf
        String successMessage = (String) request.getSession().getAttribute("successMessage");
        if (successMessage != null) {
            model.addAttribute("successMessage", successMessage);
            request.getSession().removeAttribute("successMessage");
        }

        return "profile";
    }

    // --- [5] Upload ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ---
    @PostMapping(
        value = "/upload-avatar",
        consumes = MediaType.MULTIPART_FORM_DATA_VALUE,
        produces = MediaType.APPLICATION_JSON_VALUE
    )
    @ResponseBody
    public ResponseEntity<Map<String, Object>> uploadAvatar(@RequestParam("avatar") MultipartFile file,
                                                            Principal principal) {
        Map<String, Object> resp = new HashMap<>();

        if (principal == null) {
            resp.put("message", "unauthorized");
            return ResponseEntity.status(401).body(resp);
        }
        if (file == null || file.isEmpty()) {
            resp.put("message", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î");
            return ResponseEntity.badRequest().body(resp);
        }

        // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏ä‡πà‡∏ô 3MB)
        long MAX_SIZE = 3L * 1024 * 1024;
        if (file.getSize() > MAX_SIZE) {
            resp.put("message", "‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3MB");
            return ResponseEntity.badRequest().body(resp);
        }

        // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ö‡∏≤‡∏á‡∏ä‡∏ô‡∏¥‡∏î
        String contentType = Optional.ofNullable(file.getContentType()).orElse("");
        boolean isImage = contentType.startsWith("image/");
        if (!isImage) {
            resp.put("message", "‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
            return ResponseEntity.badRequest().body(resp);
        }

        Set<String> allowedExt = Set.of("jpg", "jpeg", "png", "gif", "webp");
        String original = Optional.ofNullable(file.getOriginalFilename()).orElse("avatar");
        String baseName = Paths.get(original).getFileName().toString(); // ‡∏Å‡∏±‡∏ô path traversal
        String ext = "";
        int dot = baseName.lastIndexOf('.');
        if (dot >= 0 && dot < baseName.length() - 1) {
            ext = baseName.substring(dot + 1).toLowerCase(Locale.ROOT);
        }
        if (!ext.isEmpty() && !allowedExt.contains(ext)) {
            resp.put("message", "‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå: " + allowedExt);
            return ResponseEntity.badRequest().body(resp);
        }
        if (ext.isEmpty()) {
            // ‡πÄ‡∏î‡∏≤ ext ‡∏à‡∏≤‡∏Å content-type ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
            if (contentType.equals("image/png")) ext = "png";
            else if (contentType.equals("image/jpeg")) ext = "jpg";
            else if (contentType.equals("image/gif")) ext = "gif";
            else if (contentType.equals("image/webp")) ext = "webp";
            else ext = "jpg";
        }

        String username = principal.getName();
        User user = userRepository.findByUsername(username).orElseThrow();

        // üìÅ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dev: classpath:/static/uploads/
        // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏õ‡πá‡∏ô JAR ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ ResourceHandler ‡πÉ‡∏ô WebConfig
        Path uploadDir = Paths.get("src/main/resources/static/uploads");
        try {
            if (!Files.exists(uploadDir)) {
                Files.createDirectories(uploadDir);
            }

            // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            String oldUrl = user.getAvatarUrl();
            if (oldUrl != null && !oldUrl.isBlank() && oldUrl.startsWith("/uploads/")) {
                Path oldFilePath = Paths.get("src/main/resources/static" + oldUrl);
                Files.deleteIfExists(oldFilePath);
            }

            // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
            String filename = UUID.randomUUID() + "." + ext;
            Path filePath = uploadDir.resolve(filename);
            Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL ‡πÉ‡∏ô DB (‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏ú‡πà‡∏≤‡∏ô /uploads/**)
            String publicUrl = "/uploads/" + filename;
            user.setAvatarUrl(publicUrl);
            userRepository.save(user);

            resp.put("message", "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            resp.put("avatarUrl", publicUrl);
            return ResponseEntity.ok(resp);

        } catch (IOException e) {
            resp.put("message", "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + e.getMessage());
            return ResponseEntity.internalServerError().body(resp);
        }
    }
}
